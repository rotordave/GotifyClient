/* 
 * Gotify REST-API.
 *
 * This is the documentation of the Gotify REST-API.  # Authentication In Gotify there are two token types: __clientToken__: a client is something that receives message and manages stuff like creating new tokens or delete messages. (f.ex this token should be used for an android app) __appToken__: an application is something that sends messages (f.ex. this token should be used for a shell script)  The token can be either transmitted through a header named `X-Gotify-Key` or a query parameter named `token`. There is also the possibility to authenticate through basic auth, this should only be used for creating a clientToken.  \\- --  Found a bug or have some questions? [Create an issue on GitHub](https://github.com/gotify/server/issues)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Holds information about a plugin instance for one user.
    /// </summary>
    [DataContract]
    public partial class PluginConf :  IEquatable<PluginConf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginConf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginConf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginConf" /> class.
        /// </summary>
        /// <param name="capabilities">Capabilities the plugin provides (required).</param>
        /// <param name="enabled">Whether the plugin instance is enabled. (required).</param>
        /// <param name="token">The user name. For login. (required).</param>
        public PluginConf(List<string> capabilities = default(List<string>), bool? enabled = default(bool?), string token = default(string))
        {
            // to ensure "capabilities" is required (not null)
            if (capabilities == null)
            {
                throw new InvalidDataException("capabilities is a required property for PluginConf and cannot be null");
            }
            else
            {
                this.Capabilities = capabilities;
            }
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for PluginConf and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for PluginConf and cannot be null");
            }
            else
            {
                this.Token = token;
            }
        }
        
        /// <summary>
        /// The author of the plugin.
        /// </summary>
        /// <value>The author of the plugin.</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; private set; }

        /// <summary>
        /// Capabilities the plugin provides
        /// </summary>
        /// <value>Capabilities the plugin provides</value>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Whether the plugin instance is enabled.
        /// </summary>
        /// <value>Whether the plugin instance is enabled.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The plugin id.
        /// </summary>
        /// <value>The plugin id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// The license of the plugin.
        /// </summary>
        /// <value>The license of the plugin.</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string License { get; private set; }

        /// <summary>
        /// The module path of the plugin.
        /// </summary>
        /// <value>The module path of the plugin.</value>
        [DataMember(Name="modulePath", EmitDefaultValue=false)]
        public string ModulePath { get; private set; }

        /// <summary>
        /// The plugin name.
        /// </summary>
        /// <value>The plugin name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// The user name. For login.
        /// </summary>
        /// <value>The user name. For login.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The website of the plugin.
        /// </summary>
        /// <value>The website of the plugin.</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginConf {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  ModulePath: ").Append(ModulePath).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginConf);
        }

        /// <summary>
        /// Returns true if PluginConf instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginConf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginConf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.ModulePath == input.ModulePath ||
                    (this.ModulePath != null &&
                    this.ModulePath.Equals(input.ModulePath))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.ModulePath != null)
                    hashCode = hashCode * 59 + this.ModulePath.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
