/* 
 * Gotify REST-API.
 *
 * This is the documentation of the Gotify REST-API.  # Authentication In Gotify there are two token types: __clientToken__: a client is something that receives message and manages stuff like creating new tokens or delete messages. (f.ex this token should be used for an android app) __appToken__: an application is something that sends messages (f.ex. this token should be used for a shell script)  The token can be either transmitted through a header named `X-Gotify-Key` or a query parameter named `token`. There is also the possibility to authenticate through basic auth, this should only be used for creating a clientToken.  \\- --  Found a bug or have some questions? [Create an issue on GitHub](https://github.com/gotify/server/issues)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Password for updating the user.
    /// </summary>
    [DataContract]
    public partial class UserPass :  IEquatable<UserPass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPass" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPass() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPass" /> class.
        /// </summary>
        /// <param name="pass">The user password. For login. (required).</param>
        public UserPass(string pass = default(string))
        {
            // to ensure "pass" is required (not null)
            if (pass == null)
            {
                throw new InvalidDataException("pass is a required property for UserPass and cannot be null");
            }
            else
            {
                this.Pass = pass;
            }
        }
        
        /// <summary>
        /// The user password. For login.
        /// </summary>
        /// <value>The user password. For login.</value>
        [DataMember(Name="pass", EmitDefaultValue=false)]
        public string Pass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPass {\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPass);
        }

        /// <summary>
        /// Returns true if UserPass instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPass input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pass == input.Pass ||
                    (this.Pass != null &&
                    this.Pass.Equals(input.Pass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pass != null)
                    hashCode = hashCode * 59 + this.Pass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
